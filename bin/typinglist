#!/bin/env perl

=pod

=head1 NAME

typinglist - given a layout and flag, create word list for tutorials

=head1 SYNOPSIS

  typinglist -keyboard etc/qwerty.conf -set NAME

=head1 DESCRIPTION

=head1 HISTORY

=over

=item * 24 Sep 2010

First version.

=back 

=head1 BUGS

=head1 AUTHOR

=head1 CONTACT

=cut

use strict;
use warnings FATAL=>"all";

use Carp;
use Config::General;
use Cwd qw(getcwd abs_path);
use File::Basename;
use FindBin;
use Getopt::Long;
use Pod::Usage;
use Time::HiRes qw(gettimeofday tv_interval);
use lib "$FindBin::RealBin";
use lib "$FindBin::RealBin/../lib";
use lib "$FindBin::RealBin/lib";

our (%OPT,%CONF,$conf);
our $VERSION = 0.01;

use Set::IntSpan;
# read and parse configuration file
_parse_config();

my %keyboard = Config::General->new(-file=>$CONF{keyboard})->getall;

#my $keyset = $CONF{keyset}{$CONF{set}};

printinfo("<wordlists layout='$CONF{keyboard}'>");
for my $keysetname (sort {$CONF{keyset}{$a}{idx} <=> $CONF{keyset}{$b}{idx}} keys %{$CONF{keyset}}) {
  my $keyset = $CONF{keyset}{$keysetname};
  next if exists $keyset->{use} && ! $keyset->{use};
  printinfo("<wordlist id='$keysetname'>");
  my @words = get_words($keyset);
  for my $var (qw(idx row include exclude length chars)) {
    next unless exists $keyset->{$var};
    printinfo("<setting var='$var'>$keyset->{$var}</setting>");
  }
  my $nwords = @words;
  printinfo("<words count='$nwords'>");
  print join("\n",sort @words),"\n";
  printinfo("</words>");
  printinfo("</wordlist>");
}
printinfo("</wordlists>");
  
sub get_words {
    my $keyset = shift;
    my %chars = parse_keyset($keyset);
    my $length = Set::IntSpan->new($keyset->{length});
    $keyset->{chars} = join("",sort keys %chars);
    my @words;
    open(F,$CONF{wordlist});
  WORD:
    while(<F>) {
	chomp;
	my ($word) = split;
	next unless $length->member(length($word));
	next unless $word =~ /[aeiouy]/;
	$word = lc $word;
	my @wordchars = split("",$word);
	for my $wordchar (@wordchars) {
	    if(! exists $chars{$wordchar}) {
		next WORD;
	    }
	}
	push @words, $word;
    }
    return @words;
}

sub parse_keyset {
    my $keyset = shift;
    my @chars;
    if(my $rownames = $keyset->{row}) {
      for my $rowname (split(",",$rownames)) {
	my $rownum = $CONF{rowlookup}{$rowname};
	my @rowchars = map { split("",$_) } split(" ",$keyboard{keyboard}{row}{$rownum}{keys});
	push @chars, @rowchars;
      }
    }
    if($keyset->{include}) {
	push @chars, split("",$keyset->{include});
    }
    if($keyset->{exclude}) {
	@chars = grep($keyset->{exclude} !~ /$_/, @chars);
    }
    @chars = grep($_ =~ /[a-z]/i, @chars);
    return map { $_=>1 } @chars;
}

sub validateconfiguration {

}

################################################################
#
# *** DO NOT EDIT BELOW THIS LINE ***
#
################################################################

sub _parse_config {
  my $dump_debug_level = 3;
  GetOptions(\%OPT, 
	     "keyboard=s",
	     "set=s",
	     "configfile=s",
	     "help",
	     "man",
	     "debug:i");
  pod2usage() if $OPT{help};
  pod2usage(-verbose=>2) if $OPT{man};
  loadconfiguration($OPT{configfile});
  populateconfiguration(); # copy command line options to config hash
  validateconfiguration(); 
  if(defined $CONF{debug} && $CONF{debug} == $dump_debug_level) {
    $Data::Dumper::Indent    = 2;
    $Data::Dumper::Quotekeys = 0;
    $Data::Dumper::Terse     = 0;
    $Data::Dumper::Sortkeys  = 1;
    $Data::Dumper::Varname = "OPT";
    printdumper(\%OPT);
    $Data::Dumper::Varname = "CONF";
    printdumper(\%CONF);
    exit;
  }
}

sub populateconfiguration {
  for my $var (keys %OPT) {
    $CONF{$var} = $OPT{$var};
  }
  repopulateconfiguration(\%CONF);
}

sub repopulateconfiguration {
  my $root     = shift;
	return unless ref($root) eq "HASH";
  for my $key (keys %$root) {
    my $value = $root->{$key};
    if(ref($value) eq "HASH") {
      repopulateconfiguration($value);
    } elsif (ref($value) eq "ARRAY") {
      for my $item (@$value) {
        repopulateconfiguration($item);
      }
    } elsif(defined $value) {
      while($value =~ /__([^_].+?)__/g) {
        my $source = "__" . $1 . "__";
        my $target = eval $1;
        $value =~ s/\Q$source\E/$target/g;
      }
      $root->{$key} = $value;
    }
  }
}

################################################################
#
#

sub loadconfiguration {
  my $file = shift;
  if(defined $file) {
    if(-e $file && -r _) {
      # provided configuration file exists and can be read
      $file = abs_path($file);
    } else {
      confess "The configuration file [$file] passed with -configfile does not exist or cannot be read.";
    }
  } else {
    # otherwise, try to automatically find a configuration file
    my ($scriptname,$path,$suffix) = fileparse($0);
    my $cwd     = getcwd();
    my $bindir  = $FindBin::RealBin;
    my $userdir = $ENV{HOME};
    my @candidate_files = (
			   "$cwd/$scriptname.conf",
			   "$cwd/etc/$scriptname.conf",
			   "$cwd/../etc/$scriptname.conf",
			   "$bindir/$scriptname.conf",
			   "$bindir/etc/$scriptname.conf",
			   "$bindir/../etc/$scriptname.conf",
			   "$userdir/.$scriptname.conf",
			   );
    my @additional_files = (

			   );
    for my $candidate_file (@additional_files,@candidate_files) {
      #printinfo("configsearch",$candidate_file);
      if(-e $candidate_file && -r _) {
	$file = $candidate_file;
	#printinfo("configfound",$candidate_file);
	last;
      }
    }
  }
  if(defined $file) {
    $OPT{configfile} = $file;
    $conf = new Config::General(
				-ConfigFile=>$file,
				-IncludeRelative=>1,
				-ExtendedAccess=>1,
				-AllowMultiOptions=>"yes",
				-LowerCaseNames=>1,
				-AutoTrue=>1
			       );
    %CONF = $conf->getall;
  }
}

sub printdebug {
  my ($level,@msg) = @_;
  my $prefix = "debug";
  if(defined $CONF{debug} && $CONF{debug} >= $level) {
    printinfo(sprintf("%s[%d]",$prefix,$level),@msg);
  }
}

sub printinfo {
  print join(" ",@_),"\n";
}

sub printdumper {
  use Data::Dumper;
  print Dumper(@_);
}

